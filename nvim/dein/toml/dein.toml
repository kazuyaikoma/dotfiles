[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'

# comment
[[plugins]]
repo = 'tpope/vim-commentary'

# git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'

# git blame
[[plugins]]
repo = 'tpope/vim-fugitive'

# ripgrep
[[plugins]]
repo = 'jremmen/vim-ripgrep'

# silicon
[[plugins]]
repo = 'segeljakt/vim-silicon'

# DrawIt!
[[plugin]]
repo = 'vim-scripts/DrawIt'

# color theme
[[plugin]]
repo = 'mhartington/oceanic-next'

# Syntax checker
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
autocmd ColorScheme * hi ALEWarning cterm=underline ctermfg=LightYellow
autocmd ColorScheme * hi ALEError cterm=underline ctermfg=Red
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'css':        ['prettier'],
\   'ruby':       ['rubocop'],
\   'c':          ['clangd'],
\   'cpp':        ['clangd'],
\}
'''

# auto parenthesis completion
[[plugins]]
repo = 'cohama/lexima.vim'

# theme
[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'wadackel/vim-dogrun'

# zen mode
[[plugins]]
repo = 'junegunn/goyo.vim'

# Rust
[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'

# Flutter & Dart
[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
[[plugins]]
repo = 'thosakwe/vim-flutter'

# Python Linter
[[plugins]]
repo = 'scrooloose/syntastic'

# html5 completion
[[plugins]]
repo = 'othree/html5.vim'
[[plugins]]
repo = 'mattn/emmet-vim'

# python auto formatter
[[plugins]]
repo = 'tell-k/vim-autopep8'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_ignore_case = 1
    let g:deoplete#custom#option = 1

    " <TAB>: completion.
    imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'takkii/ruby-dictionary3'
